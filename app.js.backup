const http = require('http');
const jsreport = require('jsreport');
const pdfUtils = require("jsreport-pdf-utils")
var express = require('express');
var app = express();
var fs = require('fs');
var path = require('path');
var router = express.Router()
var request = require('request');
var https = require("https");
var privateKey  = fs.readFileSync('/etc/letsencrypt/live/misc.minagate.com/privkey.pem', 'utf8');
var certificate = fs.readFileSync('/etc/letsencrypt/live/misc.minagate.com/fullchain.pem', 'utf8');
var credentials = {key: privateKey, cert: certificate};
const Excel = require('exceljs');
//app.use(express.json());
app.timeout = 2000000; // about 30 minutes
var httpsServer = https.createServer(credentials,app);
httpsServer.listen(2503);

console.log("server is running")
var bodyParser = require('body-parser');

app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ extended: false }));

//--------------------------------------------------------------------------
//                  SETS HEADERS
//--------------------------------------------------------------------------
app.use((req, res, next) => {
    res.append('Access-Control-Allow-Origin', ['*']);
    res.append('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
    res.append('Access-Control-Allow-Headers', 'Content-Type');
    next();
});
//--------------------------------------------------------------------------
//                  UPLOADS TO FIREBASE
//--------------------------------------------------------------------------
function uploadToFirebase(data, res) {
    try {
        let url = "https://us-central1-waybill-project.cloudfunctions.net//storePdf2";

        let temp = {
            image: data

        }
        body = temp
        request({
            url: url,
            method: "POST",
            json: true,
            body: temp,

        }, function (error, response, body) {
            res.send(response)
        });
    }
    catch (error) {
        console.log(error)
    }
}
//---------------------------------------------------------------------------------
//          RECIEVES REQUESTS AND ROUTES THEM TO THEIR RESPECTIVE HANDLERS
//---------------------------------------------------------------------------------

app.get('/', function (req, res) {

    res.send('Reporting Server');
});

app.post('/generateReport', function (req, res) {

    let params = req.body.data;

    if (req.body.logo) {
        try {
            logo = JSON.parse(req.body.logo)
            body = JSON.parse(req.body.data)
            body.logo = logo
            body = JSON.stringify(body)
            params = body
            params.logo = req.body.logo
        }
        catch (error) {
            console.log(err)
        }
    }

    params.json = req.body.data
    let template = req.body.template + '.html'
    generateReport(res, params, req, template);
});


app.post('/generateXls', function (req, res) {
    generateXls(req, res);
});

app.get('/getXls', function (req, res) {
    getXLS(req, res)
})

// --------------------------------------------------------------------------------------------- //
//          downloads the generate excel file and removes files older than 10 minutes
// --------------------------------------------------------------------------------------------- //
function getXLS(req, res) {



    console.log(req.query.fileName)
    res.download('temp/' + req.query.fileName)
    fs.readdir(dirPath = 'temp/', function (err, files) {
        if (err) return console.log(err);
        files.forEach(function (file) {
            var filePath = dirPath + file;
            fs.stat(filePath, function (err, stat) {
                if (err) return console.log(err);
                var livesUntil = new Date();
                livesUntil.setMinutes(livesUntil.getMinutes());
                if (livesUntil.getTime() - stat.ctime.getTime() > 600000) {
                    fs.unlink(filePath, function (err) {
                        if (err) return console.log(err);
                    });
                }
            });
        });
    });
}

// --------------------------------------------------------------------------------------------- //
//                              generate excel file and save it to temp
// --------------------------------------------------------------------------------------------- //
function generateXls(req, res) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");

    const workbook = new Excel.Workbook();
    const data = req.body.data
    const sheet = workbook.addWorksheet(data.title ? data.title : '');
    let columns = data.columns;

    // add logo to sheet
    var logo = workbook.addImage({
        filename: 'logo-small.png',
        extension: 'png',
    });
    sheet.addImage(logo, 'A2:B7');
        sheet.mergeCells('A2', 'B7');
    sheet.getRow(1).hidden = true
    sheet.getCell('C2').value = new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate() + ' ' + new Date().getHours() + ':' + new Date().getMinutes()

    if (data.title) {
        sheet.getCell('C3').value = data.title
    }
    if (data.user_id) {
        sheet.getCell('C4').value = "Printed by :" + data.user_id
    }
    sheet.getCell('C5').value = "العدد الكلي : " + data.rows.length;

    ['C2', 'C3', 'C4','C5'].map(key => {
        sheet.getCell(key).font = {
            size: 12,
            'name': 'Calibri',
            'family': 2,
            'bold': true
        };
        sheet.getCell(key).alignment = {
            vertical: 'middle',
            horizontal: 'right',
        }
    });

    columns.forEach((el) => {
        el.style = {
            font: {
                size: 12,
                'name': 'Calibri',
                'family': 2,
            },
            alignment: {
                vertical: 'middle',
                horizontal: 'center',
            },
            border: {
                bottom: { style: 'hair', color: { argb: 'FFC0C0C0' } },
            }
        }
    })

    // start row 7
    sheet.getRow(8).values = columns.map(el => el.header);
    sheet.getRow(8).font = {
        size: 12,
        'name': 'Calibri',
        'family': 2,
        'bold': true
    };
    sheet.getRow(8).alignment = {
        vertical: 'middle',
        horizontal: 'center',
    }
    sheet.getRow(8).fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'cccccc' }
    };
    sheet.getRow(8).border = {
        top: { style: 'double', color: { argb: 'black' } },
        left: { style: 'double', color: { argb: 'black' } },
        bottom: { style: 'double', color: { argb: 'black' } },
        right: { style: 'double', color: { argb: 'black' } }
    }

    sheet.columns = columns;
    rows = data.rows;
    rows.forEach(element => {
        sheet.addRow(element);
    });
    let filename = Math.random()
    sheet.getColumn('A').width = 35;

    workbook.xlsx.writeFile('temp/' + filename + '.XLSX')
        .then(function () {
            console.log('done');
            res.send(filename.toString())

        }).catch(ex => {
            console.log(ex);
        });
}

// --------------------------------------------------------------------------------------------- //
//                           renders the report and calls upload to firebase
// --------------------------------------------------------------------------------------------- //
function generateReport(res, params, req, template) {
    try {
        jsreport.render({
            template: {
                content: fs.readFileSync(path.join(template), 'utf8'),
                recipe: "chrome-pdf",
                engine: "handlebars",

                chrome: {
                    timeout: 3000000,
                    headerTemplate: "<div style='text-align:center'>{#pageNum}/{#numPages}</div>",
                    width: "800px",
                    "marginTop": "1cm",
                    "marginLeft": "1cm",
                    launchOptions: {
                        timeout: 3000000,
                    }
                }
            },
            data: params,
        }).then((out) => {
            res.send(out.content.toString('base64'))
            // uploadToFirebase(out.content.toString('base64'), res)
        }).catch((e) => {
            res.end(e.message);
        });
    }
    catch (err) {
        console.log(err)
    }
}
